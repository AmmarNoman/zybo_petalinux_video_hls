/*
 * Empty C++ Application
 */
#include <iostream>
#include <stdint.h>
#include <stdexcept>
#include "xparameters.h"
#include "display_ctrl.h"
#include "linuxmmap.h"
#include "xil_printf.h"
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"

using namespace std;
using namespace cv;

/*--------------------------*/
/*        Constants         */
/*--------------------------*/

#define DISPLAY_UIO_ID			( 0 )
#define DISPLAY_DEF_VMODE		( VMODE_640x480 )
#define DISPLAY_MAX_WIDTH		( 640 )
#define DISPLAY_MAX_HEIGHT		( 480 )
#define DISPLAY_MAX_FRAME		( DISPLAY_MAX_WIDTH*DISPLAY_MAX_HEIGHT )
#define DISPLAY_STRIDE 			( DISPLAY_MAX_WIDTH*sizeof( uint32_t ) )
#define DISPLAY_IS_HDMI			( false )
#define DISPLAY_ROI_WIDTH		( 320 )
#define DISPLAY_ROI_HEIGHT		( 240 )
#define VDMA_UIO_ID				( 2 )
#define VDMA_DEVICE_ID 			( XPAR_AXI_VDMA_0_DEVICE_ID )
#define VDMA_FRAME_BUFF_ADDR	( 0x30000000 ) /* Physical Address */

/*--------------------------*/
/*        Type Defs         */
/*--------------------------*/

typedef uint32_t ( vdma_framebuff )[ DISPLAY_NUM_FRAMES ][ DISPLAY_MAX_FRAME ];

/*--------------------------*/
/*       Declarations       */
/*--------------------------*/

/* Object that represents the Digilent AXI Display Controller. */
DisplayCtrl display_obj;

/* The following virtual addresses need to be defined such that
They are mapped to the appropriate physical addresses! In the future, the
generic uio driver should be used to perform these memory maps! */
linuxmmap dispctrl_mmap_obj( DISPLAY_UIO_ID );
linuxmmap vdma_mmap_obj( VDMA_UIO_ID );
linuxmmap framebuff_mmap_obj( VDMA_FRAME_BUFF_ADDR, sizeof( vdma_framebuff ) );

/* Reference the memory dedicated to the frame buffers. */
vdma_framebuff& framebuff_arr = *( reinterpret_cast<vdma_framebuff*>( framebuff_mmap_obj.getvaddr() ) );
uint32_t* vir_framebuff_ptr[ DISPLAY_NUM_FRAMES ];
uint32_t* phy_framebuff_ptr[ DISPLAY_NUM_FRAMES ];

/* OpenCV objects. */
Mat framebuff_mat[ DISPLAY_NUM_FRAMES ];
VideoCapture vstream_obj( -1 );
Mat roi_mat;

/*--------------------------*/
/*           Main           */
/*--------------------------*/

int main()
{
	return 0;
}

void outbyte (char8 c)
{
	cout << c;
}

char8 inbyte(void)
{
	char c;
	cin >> c;
	return c;
}
